#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>

#define LIST_INIT_SIZE 100
#define LISTCREATEMENT 10

typedef struct {
    int *elem;
    int length;
    int listsize;
}Sqlist;

void Init(Sqlist *L){
    L->elem = (int *)malloc(LIST_INIT_SIZE * sizeof(int));
    if(!L->elem)
        exit(0);
    L->length = 0;
    L->listsize = LIST_INIT_SIZE;
    printf("Successful!\n");
}

void Input(Sqlist *L){
    int len,i;
    printf("The length of Sqlist is:");
    scanf("%d",&len);
    if(len > L->listsize){
        printf("overstep the boundary.ERROR");
        exit(0);
    }
    for(i = 0; i < len; i++){
        printf("Input %d element:",(i+1));
        scanf("%d",&L->elem[i]);
    }
    L->length = len;
    printf("Successful!\n");
}

void Insert(Sqlist *L){
    int l,e;
    printf("Input the element of location and value:");
    scanf("%d %d",&l,&e);
    if(l < 1 || l > L->length ){
        printf("ERROR.Because the location of element\n");
        exit(0);
    }
    if(L->length >= L->listsize){
        int *newbase;
        newbase = (int *)realloc(L->elem,(L->listsize + LISTCREATEMENT)*sizeof(int));
        if(!newbase){
            printf("Failure create.\n");
        exit(0);
        }
        L->elem = newbase;
        L->listsize += LISTCREATEMENT;
    }
    int *p,*q;
    q = &(L->elem[l-1]);
    for(p = &(L->elem[L->length -1]); p >= q; --p)
        *(p+1) = *p;
    *q = e;
    //int i;
    //for(i = L->length - 1; i >= l - 1; i--){
    //    L->elem[i + 1] = L->elem[i];
    //}          //可行
    //L->elem[l - 1] = e;
    L->length++;
    printf("Insert Successful!\n");
}

void Delete(Sqlist *L){
    int l,e;
    printf("Please input the element of location:");
    scanf("%d", &l);
    if(l < 1 || l > L->length){
        printf("ERROR.Because the location of element\n");
        exit(0);
    }
    e = L->elem[l-1];
    int i;
    for(i = l - 1;i < L->length - 1; i++){
        L->elem[i] = L->elem[i+1];
    }            // 可行
    //int *p,q;
   // p = &(L->elem[l - 1]);
    //e = *p;
    //q = L->elem + L->length - 1;   //初始位置
    //for(++p; p<=q; ++p)
     //   *(p-1) = *p;
    L->length--;
    printf("the delete element is %d \n",e);
    printf("Delete Successful!\n");
}

void Output(Sqlist *L){
    int i;
    printf("The Sqlist is as follows:\n");
    for(i = 0; i < L->length; i++){
        printf("%d ",L->elem[i]);
    }
    printf("\n");
}

void Injuiry(Sqlist *L){
    int l;
    printf("Please input the location of the element:");
    scanf("%d",&l);
    if(l < 1 || l > L->length){
        printf("ERROR.Because the location of element\n");
        exit(0);
    }
    printf("the element is %d\n",L->elem[l-1]);
}


void List_main(Sqlist *L){
    int choose = 0;
    while(1){
        printf("               以下是对线性表的操作\n");
        printf("     -------------------------------------------\n");
        printf("                      1.Insert\n");
        printf("                      2.Delete\n");
        printf("                      3.Output\n");
        printf("                      4.Injury\n");
        printf("                      5.Exit\n");
        printf("     --------------------------------------------\n");
        printf("               请选择你的操作：\n");
        scanf("%d",&choose);
        switch(choose)
        {
            case 1:
                Insert(L);
            break;
            case 2:
                Delete(L);
            break;
            case 3:
                Output(L);
            break;
            case 4:
                Injuiry(L);
            break;
            default: exit(0);
        }
        printf("------------------------------------------------------\n");
        printf("------------------------------------------------------\n");
    }
}

int  main()
{
    Sqlist L;
    Init(&L);
    Input(&L);
    List_main(&L);
    return 0;
}
